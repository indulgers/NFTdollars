import { ref } from 'vue';
import { error, isArray } from '../utils';

/**
 * 由地址解析坐标点
 */
function useAddressGeocoder(cal) {
    const point = ref();
    const isLoading = ref(true);
    const isEmpty = ref(true);
    let geocoder;
    const init = () => {
        if (!geocoder) {
            geocoder = new BMapGL.Geocoder();
        }
    };
    const get = (address, city) => {
        init();
        if (!address)
            return error('missed required params: address');
        if (!city)
            return error('missed required  params: city');
        const isBatch = isArray(address);
        isLoading.value = true;
        (() => {
            if (isBatch) {
                return Promise.all(address.map((item) => getPoint(geocoder, item, city)));
            }
            return getPoint(geocoder, address, city);
        })()
            .then((res) => {
            if (res) {
                if (isBatch) {
                    let emptyCount = 0;
                    point.value = res.map((item) => {
                        emptyCount += +!item;
                        return item;
                    });
                    isEmpty.value = emptyCount === res.length;
                }
                else {
                    point.value = res;
                    isEmpty.value = false;
                }
            }
            else {
                point.value = res;
                isEmpty.value = true;
            }
            cal && cal(point);
        })
            .catch((err) => {
            error(err);
            isEmpty.value = true;
            point.value = null;
        })
            .finally(() => {
            isLoading.value = false;
        });
    };
    return {
        get,
        point,
        isLoading,
        isEmpty
    };
}
function getPoint(geocoder, address, city) {
    return new Promise((resolve) => {
        // 将地址解析结果显示在地图上，并调整地图视野
        geocoder.getPoint(address, (_point) => {
            if (_point) {
                resolve(_point);
            }
            else {
                resolve(null);
            }
        }, city);
    });
}

export { useAddressGeocoder };
