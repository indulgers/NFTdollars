declare type Events = {
    initd: BMapGL.Map;
    unload: any;
    [prop: string]: any;
};
declare function useBaseMapListener(): {
    emit: {
        <Key extends keyof Events>(type: Key, event: Events[Key]): void;
        <Key_1 extends keyof Events>(type: undefined extends Events[Key_1] ? Key_1 : never): void;
    };
    on: {
        <Key_2 extends keyof Events>(type: Key_2, handler: import("mitt").Handler<Events[Key_2]>): void;
        (type: "*", handler: import("mitt").WildcardHandler<Events>): void;
    };
    off: {
        <Key_3 extends keyof Events>(type: Key_3, handler?: import("mitt").Handler<Events[Key_3]> | undefined): void;
        (type: "*", handler: import("mitt").WildcardHandler<Events>): void;
    };
};
export default useBaseMapListener;
