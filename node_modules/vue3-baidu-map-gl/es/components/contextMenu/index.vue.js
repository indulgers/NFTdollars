import { defineComponent, watch } from 'vue';
import useBaseMapEffect from '../../hooks/useBaseMapEffect';
import useLifeCycle from '../../hooks/useLifeCycle';
import { callWhenDifferentValue, isString, bindEvents } from '../../utils/index';

const __default__ = {
    name: 'BContextMenu'
};
var script = /*#__PURE__*/ defineComponent(Object.assign(Object.assign({}, __default__), { props: {
        width: { type: Number, required: false, default: 100 },
        menuItems: { type: Array, required: false, default: () => [] },
        onOpen: { type: null, required: false },
        onClose: { type: null, required: false }
    }, emits: ['initd', 'unload', 'open', 'close'], setup(__props, { emit: vueEmits }) {
        const props = __props;
        // const getParentInstance = inject('getOverlayInstance', () => null)
        const { ready } = useLifeCycle();
        let contextMenu;
        useBaseMapEffect((map) => {
            // const target = getParentInstance() || map
            const target = map;
            const cal = () => {
                contextMenu && target.removeContextMenu(contextMenu);
            };
            const init = () => {
                const { width, menuItems } = props;
                contextMenu = new BMapGL.ContextMenu();
                for (const item of menuItems) {
                    if (isString(item) && item === '-') {
                        contextMenu.addSeparator();
                        continue;
                    }
                    const menuItem = new BMapGL.MenuItem(item.text, function (point, pixel) {
                        item.callback.call(null, {
                            point,
                            pixel,
                            map,
                            BMapGL,
                            target: target
                        });
                    }, {
                        width,
                        id: String(Math.random())
                    });
                    item.disabled ? menuItem.disable() : menuItem.enable();
                    contextMenu.addItem(menuItem);
                }
                target.addContextMenu(contextMenu);
                bindEvents(props, vueEmits, contextMenu);
            };
            watch(() => {
                return props.menuItems;
            }, callWhenDifferentValue(() => {
                cal();
                init();
            }), {
                deep: true
            });
            init();
            ready(map, contextMenu);
            // 在地图上添加点标记
            return cal;
        });
        return (_ctx, _cache) => {
            return null;
        };
    } }));

script.__file = "packages/components/contextMenu/index.vue";

export { script as default };
//# sourceMappingURL=index.vue.js.map
