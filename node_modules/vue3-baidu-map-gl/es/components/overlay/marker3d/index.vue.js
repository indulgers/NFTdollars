import { defineComponent, watch, provide } from 'vue';
import useBaseMapEffect from '../../../hooks/useBaseMapEffect';
import useLifeCycle from '../../../hooks/useLifeCycle';
import { callWhenDifferentValue, bindEvents } from '../../../utils';

const __default__ = {
    name: 'BMarker3d'
};
var script = /*#__PURE__*/ defineComponent(Object.assign(Object.assign({}, __default__), { props: {
        position: { type: null, required: true },
        height: { type: Number, required: true },
        size: { type: Number, required: false, default: 50 },
        shape: { type: String, required: false, default: 'BMAP_SHAPE_CIRCLE' },
        fillColor: { type: String, required: false, default: '#f00' },
        fillOpacity: { type: Number, required: false, default: 0.8 },
        icon: { type: Object, required: false },
        enableMassClear: { type: Boolean, required: false, default: true },
        onClick: { type: null, required: false },
        onDblclick: { type: null, required: false },
        onMousedown: { type: null, required: false },
        onMouseup: { type: null, required: false },
        onMouseout: { type: null, required: false },
        onMouseover: { type: null, required: false },
        onRemove: { type: null, required: false },
        onRightClick: { type: null, required: false }
    }, emits: [
        'initd',
        'unload',
        'click',
        'dblclick',
        'mousedown',
        'mouseup',
        'mouseout',
        'mouseover',
        'remove',
        'rightclick'
    ], setup(__props, { emit: vueEmits }) {
        const props = __props;
        const { ready } = useLifeCycle();
        let marker3d;
        useBaseMapEffect((map) => {
            const cal = () => {
                map.removeOverlay(marker3d);
            };
            const init = () => {
                if (!props.position || !props.height)
                    return;
                const { position, shape, fillColor, fillOpacity, size, icon, height, enableMassClear } = props;
                const options = {
                    size,
                    fillColor,
                    fillOpacity,
                    shape: window[shape]
                };
                if (icon) {
                    options.icon = getIconConfig();
                }
                marker3d = new BMapGL.Marker3D(new BMapGL.Point(position.lng, position.lat), height, options);
                // 在地图上添加点标记
                map.addOverlay(marker3d);
                setMassClear(enableMassClear);
                bindEvents(props, vueEmits, marker3d);
                ready(map, marker3d);
            };
            init();
            // 监听值变化
            watch(() => props.position, callWhenDifferentValue((n) => {
                marker3d ? setPosition(n) : init();
            }), { deep: true });
            watch(() => props.height, (n) => {
                marker3d ? setHeight(n) : init();
            });
            watch(() => props.enableMassClear, setMassClear);
            watch(() => props.icon, callWhenDifferentValue(setIcon), { deep: true });
            watch(() => props.enableMassClear, setMassClear);
            watch(() => props.fillOpacity, setFillOpacity);
            watch(() => props.fillColor, setFillColor);
            return cal;
        });
        provide('getOverlayInstance', () => marker3d);
        // 获取图标配置
        function getIconConfig() {
            const { icon } = props;
            // @ts-ignore
            const { anchor, imageOffset, imageSize, imageUrl, printImageUrl } = icon;
            const iconOptions = {
                imageSize: new BMapGL.Size(imageSize.width, imageSize.height)
            };
            if (anchor) {
                iconOptions.anchor = new BMapGL.Size(anchor.x, anchor.y);
            }
            if (imageOffset) {
                iconOptions.imageOffset = new BMapGL.Size(imageOffset.x, imageOffset.y);
            }
            if (printImageUrl) {
                iconOptions.printImageUrl = printImageUrl;
            }
            return new BMapGL.Icon(imageUrl, new BMapGL.Size(imageSize.width, imageSize.height), iconOptions);
        }
        function setPosition(position) {
            try {
                // FIXME: 更新 position baidu-map-gl api报错: TypeError: Cannot read properties of undefined (reading '2x')
                marker3d.setPosition(new BMapGL.Point(position.lng, position.lat));
            }
            catch (error) {
                console.error(error);
            }
        }
        function setHeight(height) {
            marker3d.setHeight(height);
        }
        function setFillColor(color) {
            marker3d.setFillColor(color);
        }
        function setFillOpacity(opacity) {
            marker3d.setFillOpacity(opacity);
        }
        function setIcon() {
            marker3d.setIcon(getIconConfig());
        }
        function setMassClear(enableMassClear) {
            enableMassClear ? marker3d.enableMassClear() : marker3d.disableMassClear();
        }
        return (_ctx, _cache) => {
            return null;
        };
    } }));

script.__file = "packages/components/overlay/marker3d/index.vue";

export { script as default };
//# sourceMappingURL=index.vue.js.map
