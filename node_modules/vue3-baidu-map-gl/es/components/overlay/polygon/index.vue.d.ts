import { nextTick } from 'vue';
import { Callback, StrokeStyle, type Point } from '../../../utils';
export interface PolygonProps {
    /**
     * 折线的节点坐标数组
     */
    path: Point[] | string[];
    /**
     * 是否是行政区域绘制
     */
    isBoundary?: boolean;
    /**
     * @default #000000
     * 折线颜色
     */
    strokeColor?: string;
    /**
     * 自动根据多边形居中
     */
    autoCenter?: boolean;
    /**
     * 折线的宽度，以像素为单位
     */
    strokeWeight?: number;
    /**
     * 折线的透明度，取值范围0 - 1
     */
    strokeOpacity?: number;
    /**
     * 折线的样式
     */
    strokeStyle?: StrokeStyle;
    /**
     * 面填充颜色，同CSS颜色
     */
    fillColor?: string;
    /**
     * 面填充的透明度，范围0-1
     */
    fillOpacity?: number;
    /**
     * @default true
     * 是否在调用map.clearOverlays清除此覆盖物，默认为true
     */
    enableMassClear?: boolean;
    /**
     * @default false
     * 是否启用线编辑，默认为false
     */
    enableEditing?: boolean;
    /**
     * @default true
     * 是否响应点击事件，默认为true
     */
    enableClicking?: boolean;
    /**
     * @default false
     * 是否开启大地线模式，true时，两点连线将以大地线的形式。默认为false
     */
    geodesic?: boolean;
    /**
     * @default true
     * 是否进行跨经度180度裁剪，绘制跨精度180时为了优化效果，可以设置成false，默认为true
     */
    clip?: boolean;
    onClick?: Callback;
    onDblclick?: Callback;
    onMousedown?: Callback;
    onMouseup?: Callback;
    onMouseout?: Callback;
    onMouseover?: Callback;
    onRemove?: Callback;
    onLineupdate?: Callback;
}
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            fillColor: string;
            fillOpacity: number;
            strokeColor: string;
            strokeWeight: number;
            strokeOpacity: number;
            strokeStyle: StrokeStyle;
            geodesic: boolean;
            clip: boolean;
            autoCenter: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<PolygonProps>, {
            strokeColor: string;
            strokeWeight: number;
            strokeOpacity: number;
            strokeStyle: string;
            fillColor: string;
            fillOpacity: number;
            massClear: boolean;
            editing: boolean;
            clicking: boolean;
            geodesic: boolean;
            clip: boolean;
            autoCenter: boolean;
        }>>> & {
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            onClick?: ((...args: any[]) => any) | undefined;
            onDblclick?: ((...args: any[]) => any) | undefined;
            onMousedown?: ((...args: any[]) => any) | undefined;
            onMouseout?: ((...args: any[]) => any) | undefined;
            onMouseover?: ((...args: any[]) => any) | undefined;
            onMouseup?: ((...args: any[]) => any) | undefined;
            onRemove?: ((...args: any[]) => any) | undefined;
            onLineupdate?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "fillColor" | "fillOpacity" | "strokeColor" | "strokeWeight" | "strokeOpacity" | "strokeStyle" | "geodesic" | "clip" | "autoCenter">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousedown" | "mouseup" | "remove" | "lineupdate", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<PolygonProps>, {
            strokeColor: string;
            strokeWeight: number;
            strokeOpacity: number;
            strokeStyle: string;
            fillColor: string;
            fillOpacity: number;
            massClear: boolean;
            editing: boolean;
            clicking: boolean;
            geodesic: boolean;
            clip: boolean;
            autoCenter: boolean;
        }>>> & {
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            onClick?: ((...args: any[]) => any) | undefined;
            onDblclick?: ((...args: any[]) => any) | undefined;
            onMousedown?: ((...args: any[]) => any) | undefined;
            onMouseout?: ((...args: any[]) => any) | undefined;
            onMouseover?: ((...args: any[]) => any) | undefined;
            onMouseup?: ((...args: any[]) => any) | undefined;
            onRemove?: ((...args: any[]) => any) | undefined;
            onLineupdate?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousedown" | "mouseup" | "remove" | "lineupdate")[], string, {
            fillColor: string;
            fillOpacity: number;
            strokeColor: string;
            strokeWeight: number;
            strokeOpacity: number;
            strokeStyle: StrokeStyle;
            geodesic: boolean;
            clip: boolean;
            autoCenter: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<PolygonProps>, {
        strokeColor: string;
        strokeWeight: number;
        strokeOpacity: number;
        strokeStyle: string;
        fillColor: string;
        fillOpacity: number;
        massClear: boolean;
        editing: boolean;
        clicking: boolean;
        geodesic: boolean;
        clip: boolean;
        autoCenter: boolean;
    }>>> & {
        onInitd?: ((...args: any[]) => any) | undefined;
        onUnload?: ((...args: any[]) => any) | undefined;
        onClick?: ((...args: any[]) => any) | undefined;
        onDblclick?: ((...args: any[]) => any) | undefined;
        onMousedown?: ((...args: any[]) => any) | undefined;
        onMouseout?: ((...args: any[]) => any) | undefined;
        onMouseover?: ((...args: any[]) => any) | undefined;
        onMouseup?: ((...args: any[]) => any) | undefined;
        onRemove?: ((...args: any[]) => any) | undefined;
        onLineupdate?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<PolygonProps>, {
    strokeColor: string;
    strokeWeight: number;
    strokeOpacity: number;
    strokeStyle: string;
    fillColor: string;
    fillOpacity: number;
    massClear: boolean;
    editing: boolean;
    clicking: boolean;
    geodesic: boolean;
    clip: boolean;
    autoCenter: boolean;
}>>> & {
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
    onDblclick?: ((...args: any[]) => any) | undefined;
    onMousedown?: ((...args: any[]) => any) | undefined;
    onMouseout?: ((...args: any[]) => any) | undefined;
    onMouseover?: ((...args: any[]) => any) | undefined;
    onMouseup?: ((...args: any[]) => any) | undefined;
    onRemove?: ((...args: any[]) => any) | undefined;
    onLineupdate?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousedown" | "mouseup" | "remove" | "lineupdate")[], "initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousedown" | "mouseup" | "remove" | "lineupdate", {
    fillColor: string;
    fillOpacity: number;
    strokeColor: string;
    strokeWeight: number;
    strokeOpacity: number;
    strokeStyle: StrokeStyle;
    geodesic: boolean;
    clip: boolean;
    autoCenter: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps;
export default _default;
declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
declare type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? P[K] & {
        default: D[K];
    } : P[K];
};
