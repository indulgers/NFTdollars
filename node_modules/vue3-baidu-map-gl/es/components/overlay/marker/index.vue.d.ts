import { Callback, Point } from '../../../utils/index';
export declare type MarkerIcons = 'simple_red' | 'simple_blue' | 'loc_red' | 'loc_blue' | 'start' | 'end' | 'location' | 'red1' | 'red2' | 'red3' | 'red4' | 'red5' | 'red6' | 'red7' | 'red8' | 'red9' | 'red10' | 'blue1' | 'blue2' | 'blue3' | 'blue4' | 'blue5' | 'blue6' | 'blue7' | 'blue8' | 'blue9' | 'blue10';
export interface MarkerOffset {
    x: number;
    y: number;
}
export declare type MarkerCustomIcon = {
    anchor?: {
        x: number;
        y: number;
    };
    imageOffset?: {
        x: number;
        y: number;
    };
    imageSize: {
        width: number;
        height: number;
    };
    imageUrl: string;
    printImageUrl?: string;
};
export interface MarkerProps {
    position: Point;
    /**
     * 标注的位置偏移值
     */
    offset?: MarkerOffset;
    /**
     * 标注所用的图标对象
     */
    icon?: MarkerIcons | MarkerCustomIcon;
    /**
     * 显示层级
     */
    zIndex?: number;
    /**
     * @default true
     * 是否在调用map.clearOverlays清除此覆盖物，默认为true
     */
    enableMassClear?: boolean;
    /**
     * @default false
     * 是否启用拖拽，默认为false
     */
    enableDragging?: boolean;
    /**
     * @default true
     * 是否响应点击事件。默认为true
     */
    enableClicking?: boolean;
    /**
     * @default false
     * 拖拽标注时，标注是否开启离开地图表面效果。默认为false
     */
    raiseOnDrag?: boolean;
    /**
     * 拖拽标注时的鼠标指针样式。此属性值需遵循CSS的cursor属性规范
     */
    draggingCursor?: string;
    /**
     * 旋转角度
     */
    rotation?: number;
    /**
     * 鼠标移到marker上的显示内容
     */
    title?: string;
    onClick?: Callback;
    onDblclick?: Callback;
    onMousedown?: Callback;
    onMouseup?: Callback;
    onMouseout?: Callback;
    onMouseover?: Callback;
    onRemove?: Callback;
    onInfowindowclose?: Callback;
    onInfowindowopen?: Callback;
    onDragstart?: Callback;
    onDragging?: Callback;
    onDragend?: Callback;
    onRightClick?: Callback;
}
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            title: string;
            offset: MarkerOffset;
            enableDragging: boolean;
            enableMassClear: boolean;
            enableClicking: boolean;
            raiseOnDrag: boolean;
            draggingCursor: string;
            rotation: number;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<MarkerProps>, {
            offset: () => {
                x: number;
                y: number;
            };
            enableMassClear: boolean;
            enableDragging: boolean;
            enableClicking: boolean;
            raiseOnDrag: boolean;
            draggingCursor: string;
            rotation: number;
            title: string;
        }>>> & {
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            onDragend?: ((...args: any[]) => any) | undefined;
            onDragstart?: ((...args: any[]) => any) | undefined;
            onClick?: ((...args: any[]) => any) | undefined;
            onDblclick?: ((...args: any[]) => any) | undefined;
            onMousedown?: ((...args: any[]) => any) | undefined;
            onMouseout?: ((...args: any[]) => any) | undefined;
            onMouseover?: ((...args: any[]) => any) | undefined;
            onMouseup?: ((...args: any[]) => any) | undefined;
            onRightclick?: ((...args: any[]) => any) | undefined;
            onDragging?: ((...args: any[]) => any) | undefined;
            onRemove?: ((...args: any[]) => any) | undefined;
            onInfowindowclose?: ((...args: any[]) => any) | undefined;
            onInfowindowopen?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "title" | "offset" | "enableDragging" | "enableMassClear" | "enableClicking" | "raiseOnDrag" | "draggingCursor" | "rotation">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "rightclick" | "dragstart" | "dragging" | "dragend" | "mousedown" | "mouseup" | "remove" | "infowindowclose" | "infowindowopen", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<MarkerProps>, {
            offset: () => {
                x: number;
                y: number;
            };
            enableMassClear: boolean;
            enableDragging: boolean;
            enableClicking: boolean;
            raiseOnDrag: boolean;
            draggingCursor: string;
            rotation: number;
            title: string;
        }>>> & {
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            onDragend?: ((...args: any[]) => any) | undefined;
            onDragstart?: ((...args: any[]) => any) | undefined;
            onClick?: ((...args: any[]) => any) | undefined;
            onDblclick?: ((...args: any[]) => any) | undefined;
            onMousedown?: ((...args: any[]) => any) | undefined;
            onMouseout?: ((...args: any[]) => any) | undefined;
            onMouseover?: ((...args: any[]) => any) | undefined;
            onMouseup?: ((...args: any[]) => any) | undefined;
            onRightclick?: ((...args: any[]) => any) | undefined;
            onDragging?: ((...args: any[]) => any) | undefined;
            onRemove?: ((...args: any[]) => any) | undefined;
            onInfowindowclose?: ((...args: any[]) => any) | undefined;
            onInfowindowopen?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "rightclick" | "dragstart" | "dragging" | "dragend" | "mousedown" | "mouseup" | "remove" | "infowindowclose" | "infowindowopen")[], string, {
            title: string;
            offset: MarkerOffset;
            enableDragging: boolean;
            enableMassClear: boolean;
            enableClicking: boolean;
            raiseOnDrag: boolean;
            draggingCursor: string;
            rotation: number;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<MarkerProps>, {
        offset: () => {
            x: number;
            y: number;
        };
        enableMassClear: boolean;
        enableDragging: boolean;
        enableClicking: boolean;
        raiseOnDrag: boolean;
        draggingCursor: string;
        rotation: number;
        title: string;
    }>>> & {
        onInitd?: ((...args: any[]) => any) | undefined;
        onUnload?: ((...args: any[]) => any) | undefined;
        onDragend?: ((...args: any[]) => any) | undefined;
        onDragstart?: ((...args: any[]) => any) | undefined;
        onClick?: ((...args: any[]) => any) | undefined;
        onDblclick?: ((...args: any[]) => any) | undefined;
        onMousedown?: ((...args: any[]) => any) | undefined;
        onMouseout?: ((...args: any[]) => any) | undefined;
        onMouseover?: ((...args: any[]) => any) | undefined;
        onMouseup?: ((...args: any[]) => any) | undefined;
        onRightclick?: ((...args: any[]) => any) | undefined;
        onDragging?: ((...args: any[]) => any) | undefined;
        onRemove?: ((...args: any[]) => any) | undefined;
        onInfowindowclose?: ((...args: any[]) => any) | undefined;
        onInfowindowopen?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<MarkerProps>, {
    offset: () => {
        x: number;
        y: number;
    };
    enableMassClear: boolean;
    enableDragging: boolean;
    enableClicking: boolean;
    raiseOnDrag: boolean;
    draggingCursor: string;
    rotation: number;
    title: string;
}>>> & {
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
    onDragend?: ((...args: any[]) => any) | undefined;
    onDragstart?: ((...args: any[]) => any) | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
    onDblclick?: ((...args: any[]) => any) | undefined;
    onMousedown?: ((...args: any[]) => any) | undefined;
    onMouseout?: ((...args: any[]) => any) | undefined;
    onMouseover?: ((...args: any[]) => any) | undefined;
    onMouseup?: ((...args: any[]) => any) | undefined;
    onRightclick?: ((...args: any[]) => any) | undefined;
    onDragging?: ((...args: any[]) => any) | undefined;
    onRemove?: ((...args: any[]) => any) | undefined;
    onInfowindowclose?: ((...args: any[]) => any) | undefined;
    onInfowindowopen?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "rightclick" | "dragstart" | "dragging" | "dragend" | "mousedown" | "mouseup" | "remove" | "infowindowclose" | "infowindowopen")[], "initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "rightclick" | "dragstart" | "dragging" | "dragend" | "mousedown" | "mouseup" | "remove" | "infowindowclose" | "infowindowopen", {
    title: string;
    offset: MarkerOffset;
    enableDragging: boolean;
    enableMassClear: boolean;
    enableClicking: boolean;
    raiseOnDrag: boolean;
    draggingCursor: string;
    rotation: number;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps;
export default _default;
declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
declare type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? P[K] & {
        default: D[K];
    } : P[K];
};
