import { nextTick } from 'vue';
import { Callback, type Point } from '../../../utils/index';
export interface InfoWindowProps {
    modelValue?: boolean;
    title?: string;
    position: Point;
    width?: 0 | RangeOf2<220, 730>;
    height?: 0 | RangeOf2<60, 650>;
    /**
     * 信息窗最大化时的宽度，单位像素。取值范围：220 - 730
     */
    maxWidth?: RangeOf2<220, 730>;
    /**
     * 控件的偏移值
     */
    offset?: {
        x: number;
        y: number;
    };
    enableAutoPan?: boolean;
    enableCloseOnClick?: boolean;
    onClose?: Callback;
    onOpen?: Callback;
    onMaximize?: Callback;
    onRestore?: Callback;
    onClickclose?: Callback;
}
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            title: string;
            width: 0 | RangeOf2<220, 730>;
            offset: {
                x: number;
                y: number;
            };
            height: 0 | RangeOf2<60, 650>;
            modelValue: boolean;
            maxWidth: RangeOf2<220, 730>;
            enableAutoPan: boolean;
            enableCloseOnClick: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<InfoWindowProps>, {
            modelValue: boolean;
            title: string;
            width: number;
            height: number;
            maxWidth: number;
            offset: () => {
                x: number;
                y: number;
            };
            enableAutoPan: boolean;
            enableCloseOnClick: boolean;
        }>>> & {
            onOpen?: ((...args: any[]) => any) | undefined;
            onClose?: ((...args: any[]) => any) | undefined;
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            onMaximize?: ((...args: any[]) => any) | undefined;
            onRestore?: ((...args: any[]) => any) | undefined;
            onClickclose?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "title" | "width" | "offset" | "height" | "modelValue" | "maxWidth" | "enableAutoPan" | "enableCloseOnClick">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "initd" | "unload" | "open" | "close" | "maximize" | "restore" | "clickclose" | "update:modelValue", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<InfoWindowProps>, {
            modelValue: boolean;
            title: string;
            width: number;
            height: number;
            maxWidth: number;
            offset: () => {
                x: number;
                y: number;
            };
            enableAutoPan: boolean;
            enableCloseOnClick: boolean;
        }>>> & {
            onOpen?: ((...args: any[]) => any) | undefined;
            onClose?: ((...args: any[]) => any) | undefined;
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            onMaximize?: ((...args: any[]) => any) | undefined;
            onRestore?: ((...args: any[]) => any) | undefined;
            onClickclose?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "open" | "close" | "maximize" | "restore" | "clickclose" | "update:modelValue")[], string, {
            title: string;
            width: 0 | RangeOf2<220, 730>;
            offset: {
                x: number;
                y: number;
            };
            height: 0 | RangeOf2<60, 650>;
            modelValue: boolean;
            maxWidth: RangeOf2<220, 730>;
            enableAutoPan: boolean;
            enableCloseOnClick: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<InfoWindowProps>, {
        modelValue: boolean;
        title: string;
        width: number;
        height: number;
        maxWidth: number;
        offset: () => {
            x: number;
            y: number;
        };
        enableAutoPan: boolean;
        enableCloseOnClick: boolean;
    }>>> & {
        onOpen?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        onInitd?: ((...args: any[]) => any) | undefined;
        onUnload?: ((...args: any[]) => any) | undefined;
        onMaximize?: ((...args: any[]) => any) | undefined;
        onRestore?: ((...args: any[]) => any) | undefined;
        onClickclose?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<InfoWindowProps>, {
    modelValue: boolean;
    title: string;
    width: number;
    height: number;
    maxWidth: number;
    offset: () => {
        x: number;
        y: number;
    };
    enableAutoPan: boolean;
    enableCloseOnClick: boolean;
}>>> & {
    onOpen?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
    onMaximize?: ((...args: any[]) => any) | undefined;
    onRestore?: ((...args: any[]) => any) | undefined;
    onClickclose?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "open" | "close" | "maximize" | "restore" | "clickclose" | "update:modelValue")[], "initd" | "unload" | "open" | "close" | "maximize" | "restore" | "clickclose" | "update:modelValue", {
    title: string;
    width: 0 | RangeOf2<220, 730>;
    offset: {
        x: number;
        y: number;
    };
    height: 0 | RangeOf2<60, 650>;
    modelValue: boolean;
    maxWidth: RangeOf2<220, 730>;
    enableAutoPan: boolean;
    enableCloseOnClick: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default: (_: {}) => any;
    };
});
export default _default;
declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
declare type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? P[K] & {
        default: D[K];
    } : P[K];
};
