import { defineComponent, watch, provide } from 'vue';
import useBaseMapEffect from '../../../hooks/useBaseMapEffect';
import useLifeCycle from '../../../hooks/useLifeCycle';
import { callWhenDifferentValue, bindEvents } from '../../../utils';

const __default__ = {
    name: 'BPolyline'
};
var script = /*#__PURE__*/ defineComponent(Object.assign(Object.assign({}, __default__), { props: {
        path: { type: Array, required: true },
        strokeColor: { type: String, required: false, default: '#000' },
        strokeWeight: { type: Number, required: false, default: 2 },
        strokeOpacity: { type: Number, required: false, default: 1 },
        strokeStyle: { type: null, required: false, default: 'solid' },
        enableMassClear: { type: Boolean, required: false, default: true },
        enableEditing: { type: Boolean, required: false, default: false },
        enableClicking: { type: Boolean, required: false, default: true },
        geodesic: { type: Boolean, required: false, default: false },
        clip: { type: Boolean, required: false, default: true },
        onClick: { type: null, required: false },
        onDblclick: { type: null, required: false },
        onMousedown: { type: null, required: false },
        onMouseup: { type: null, required: false },
        onMouseout: { type: null, required: false },
        onMouseover: { type: null, required: false },
        onRemove: { type: null, required: false },
        onLineupdate: { type: null, required: false }
    }, emits: [
        'initd',
        'unload',
        'click',
        'dblclick',
        'mousedown',
        'mouseup',
        'mouseout',
        'mouseover',
        'remove',
        'lineupdate'
    ], setup(__props, { emit: vueEmits }) {
        const props = __props;
        const { ready } = useLifeCycle();
        let polyline;
        useBaseMapEffect((map) => {
            const cal = () => {
                map.removeOverlay(polyline);
            };
            const init = () => {
                if (!props.path || !props.path.length)
                    return;
                const { path, strokeColor, strokeWeight, strokeOpacity, strokeStyle, enableMassClear, enableEditing, enableClicking, geodesic, clip } = props;
                const pathPoints = pathPointsToMapPoints(path);
                polyline = new BMapGL.Polyline(pathPoints, {
                    strokeColor,
                    strokeWeight,
                    strokeOpacity,
                    strokeStyle,
                    enableMassClear,
                    enableEditing,
                    enableClicking,
                    geodesic,
                    clip
                });
                map.addOverlay(polyline);
                bindEvents(props, vueEmits, polyline);
                ready(map, polyline);
            };
            init();
            // 监听值变化
            watch(() => props.path, callWhenDifferentValue((n) => {
                polyline ? setPath(n) : init();
            }), {
                deep: true
            });
            watch(() => props.strokeColor, setStrokeColor);
            watch(() => props.strokeOpacity, setStrokeOpacity);
            watch(() => props.strokeWeight, setStrokeWeight);
            watch(() => props.strokeStyle, setStrokeStyle);
            watch(() => props.enableMassClear, setMassClear);
            watch(() => props.enableEditing, setEditing);
            return cal;
        });
        provide('getOverlayInstance', () => polyline);
        function pathPointsToMapPoints(pathPoints) {
            return pathPoints.map(({ lng, lat }) => new BMapGL.Point(lng, lat));
        }
        function setPath(path) {
            polyline.setPath(pathPointsToMapPoints(path));
        }
        function setStrokeColor(color) {
            polyline.setStrokeColor(color);
        }
        function setStrokeOpacity(opacity) {
            polyline.setStrokeOpacity(opacity);
        }
        function setStrokeWeight(weight) {
            polyline.setStrokeWeight(weight);
        }
        function setStrokeStyle(style) {
            polyline.setStrokeStyle(style);
        }
        function setMassClear(enableMassClear) {
            enableMassClear ? polyline.enableMassClear() : polyline.disableMassClear();
        }
        function setEditing(enableEditing) {
            enableEditing ? polyline.enableEditing() : polyline.disableEditing();
        }
        return (_ctx, _cache) => {
            return null;
        };
    } }));

script.__file = "packages/components/overlay/polyline/index.vue";

export { script as default };
//# sourceMappingURL=index.vue.js.map
