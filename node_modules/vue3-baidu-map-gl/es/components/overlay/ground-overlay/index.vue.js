import { defineComponent, watch, nextTick } from 'vue';
import useBaseMapEffect from '../../../hooks/useBaseMapEffect';
import useLifeCycle from '../../../hooks/useLifeCycle';
import { bindEvents, callWhenDifferentValue, error } from '../../../utils';

const __default__ = {
    name: 'BGroundOverlay'
};
var script = /*#__PURE__*/ defineComponent(Object.assign(Object.assign({}, __default__), { props: {
        type: { type: String, required: true },
        url: { type: [String, null, Function], required: true },
        startPoint: { type: null, required: true },
        endPoint: { type: null, required: true },
        autoCenter: { type: Boolean, required: false, default: false },
        opacity: { type: Number, required: false, default: 1 },
        onClick: { type: null, required: false },
        onDblclick: { type: null, required: false },
        onMousemove: { type: null, required: false },
        onMouseover: { type: null, required: false },
        onMouseout: { type: null, required: false }
    }, emits: ['initd', 'unload', 'click', 'dblclick', 'mousemove', 'mouseover', 'mouseout'], setup(__props, { emit: vueEmits }) {
        const props = __props;
        const { ready } = useLifeCycle();
        let groundOverlay;
        useBaseMapEffect((map) => {
            const cal = () => {
                groundOverlay && map.removeOverlay(groundOverlay);
            };
            const init = () => {
                cal();
                let { startPoint, endPoint, opacity, type, autoCenter } = props;
                const url = getUrl();
                if (!url || !startPoint || !endPoint)
                    return;
                const boundsObj = getBounds(startPoint, endPoint);
                const options = {
                    opacity,
                    type,
                    url: url.value || url
                };
                groundOverlay = new BMapGL.GroundOverlay(boundsObj, options);
                map.addOverlay(groundOverlay);
                // 自动设置中心点
                if (autoCenter) {
                    nextTick(() => {
                        // 获取中心点
                        try {
                            const center = boundsObj.getCenter();
                            map.panTo(center);
                        }
                        catch (e) {
                            error('set center error');
                        }
                    });
                }
            };
            init();
            bindEvents(props, vueEmits, groundOverlay);
            ready(map, groundOverlay);
            watch(() => props, callWhenDifferentValue(init), { deep: true });
            return cal;
        });
        function getBounds(start, end) {
            return new BMapGL.Bounds(new BMapGL.Point(start.lng, end.lat), new BMapGL.Point(end.lng, start.lat));
        }
        function getUrl() {
            let url = props.url;
            if (typeof url === 'function') {
                url = url();
                if (!url && process.env.NODE_ENV === 'development') {
                    error(`expect a function return string or canvas html element, but got ${url}`);
                    return;
                }
            }
            return url;
        }
        return (_ctx, _cache) => {
            return null;
        };
    } }));

script.__file = "packages/components/overlay/ground-overlay/index.vue";

export { script as default };
//# sourceMappingURL=index.vue.js.map
