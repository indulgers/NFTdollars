import { defineComponent, ref, getCurrentInstance, onMounted, onUpdated, openBlock, createElementBlock, createElementVNode, mergeProps, renderSlot } from 'vue';
import useBaseMapEffect from '../../../hooks/useBaseMapEffect';
import useLifeCycle from '../../../hooks/useLifeCycle';

const copyrightControlPosCacheMap = {};

const _hoisted_1 = { style: { "display": "none" } };
const __default__ = {
    name: 'BCopyright',
    inheritAttrs: false
};
var script = /*#__PURE__*/ defineComponent(Object.assign(Object.assign({}, __default__), { props: {
        anchor: { type: null, required: false, default: 'BMAP_ANCHOR_BOTTOM_RIGHT' },
        offset: { type: Object, required: false, default: () => ({ x: 83, y: 18 }) }
    }, emits: ['initd', 'unload'], setup(__props) {
        var _a;
        const props = __props;
        const { ready } = useLifeCycle();
        const copyrightContainer = ref();
        let copyrightControl;
        const uid = (_a = getCurrentInstance()) === null || _a === void 0 ? void 0 : _a.uid;
        onMounted(() => {
            const { anchor, offset } = props;
            useBaseMapEffect((map) => {
                if (!copyrightContainer.value)
                    return;
                let mapBounds = map.getBounds();
                // 同一位置的 copyright 应该调用 addCopyright,防止多个 copyright 重叠
                if (!(copyrightControl = copyrightControlPosCacheMap[anchor])) {
                    copyrightControl = new BMapGL.CopyrightControl({
                        offset: new BMapGL.Size(offset.x, offset.y),
                        anchor: window[anchor]
                    });
                    copyrightControlPosCacheMap[anchor] = copyrightControl;
                    map.addControl(copyrightControl);
                }
                copyrightControl.addCopyright({
                    id: uid,
                    content: copyrightContainer.value.innerHTML,
                    bounds: mapBounds
                });
                ready(map, copyrightControl);
                return () => {
                    var _a, _b;
                    const cacheCopyright = copyrightControlPosCacheMap[anchor];
                    const getCopyrightCollection = (_a = cacheCopyright === null || cacheCopyright === void 0 ? void 0 : cacheCopyright.getCopyrightCollection) === null || _a === void 0 ? void 0 : _a.bind(cacheCopyright);
                    if (getCopyrightCollection && ((_b = getCopyrightCollection()) === null || _b === void 0 ? void 0 : _b.length) > 1) {
                        cacheCopyright.removeCopyright(uid);
                    }
                    else {
                        map.removeControl(cacheCopyright);
                        Reflect.deleteProperty(copyrightControlPosCacheMap, anchor);
                    }
                };
            });
        });
        onUpdated(() => {
            var _a, _b;
            if (!copyrightControl)
                return;
            let copyright = copyrightControl === null || copyrightControl === void 0 ? void 0 : copyrightControl.getCopyright(uid);
            if ((copyright === null || copyright === void 0 ? void 0 : copyright.content) !== ((_a = copyrightContainer.value) === null || _a === void 0 ? void 0 : _a.innerHTML)) {
                copyrightControl.addCopyright({
                    id: uid,
                    content: (_b = copyrightContainer.value) === null || _b === void 0 ? void 0 : _b.innerHTML,
                    bounds: copyright.bounds
                });
            }
        });
        return (_ctx, _cache) => {
            return (openBlock(), createElementBlock("div", _hoisted_1, [
                createElementVNode("div", mergeProps({
                    ref_key: "copyrightContainer",
                    ref: copyrightContainer
                }, _ctx.$attrs), [
                    renderSlot(_ctx.$slots, "default")
                ], 16 /* FULL_PROPS */)
            ]));
        };
    } }));

script.__file = "packages/components/control/copyright/index.vue";

export { script as default };
//# sourceMappingURL=index.vue.js.map
