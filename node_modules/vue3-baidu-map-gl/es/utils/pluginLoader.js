import getScriptAsync from './getScriptAsync';

/** @format */
const DEFAULT_PLUGINS_SOURCE_LINK = {
    TrackAnimation: '//mapopen.bj.bcebos.com/github/BMapGLLib/TrackAnimation/src/TrackAnimation.min.js',
    Mapvgl: 'https://code.bdstatic.com/npm/mapvgl@1.0.0-beta.159/dist/mapvgl.min.js',
    Mapv: 'https://mapv.baidu.com/build/mapv.min.js',
    MapvThree: 'https://unpkg.com/mapv-three@1.0.1/dist/mapvthree.umd.js'
};
const pluginLoaderMap = {
    TrackAnimation: (customSourceLink) => getScriptAsync({
        src: customSourceLink || DEFAULT_PLUGINS_SOURCE_LINK['TrackAnimation'],
        addCalToWindow: false,
        key: 'trackAnimation'
    }),
    Mapvgl: (customSourceLink) => getScriptAsync({
        src: customSourceLink || DEFAULT_PLUGINS_SOURCE_LINK['Mapvgl'],
        addCalToWindow: false,
        key: 'Mapvgl'
    }),
    Mapv: (customSourceLink) => getScriptAsync({
        src: customSourceLink || DEFAULT_PLUGINS_SOURCE_LINK['Mapv'],
        addCalToWindow: false,
        key: 'Mapv'
    }),
    MapvThree: (customSourceLink) => getScriptAsync({
        src: customSourceLink || DEFAULT_PLUGINS_SOURCE_LINK['MapvThree'],
        addCalToWindow: false,
        key: 'MapvThree'
    })
};
function initPlugins(plugins, customPluginSourceLink = {}) {
    // 都处理成 () => promise
    const pluginsLoaders = [...new Set(plugins)].reduce((pluginsLoaderArr, pluginsKey) => {
        let plugin;
        if (typeof pluginsKey === 'string' && (plugin = pluginLoaderMap[pluginsKey])) {
            pluginsLoaderArr.push(plugin(customPluginSourceLink[pluginsKey]));
        }
        else if (typeof pluginsKey === 'function') {
            pluginsLoaderArr.push(pluginsKey());
        }
        return pluginsLoaderArr;
    }, []);
    // 加载插件
    return Promise.all(pluginsLoaders);
}

export { DEFAULT_PLUGINS_SOURCE_LINK, initPlugins, pluginLoaderMap };
